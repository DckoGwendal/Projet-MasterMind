# -*- coding: utf-8 -*-
"""
Created on Fri Sep  8 15:10:26 2023

@author: user
"""

from random import choice


color = ['R','G','Y','P','W']

# Creating the color code
def Code_Couleur(color_number, color):
    code = []
    for i in range(color_number):
        code.append(choice(color))  
    return code


# Colour code search
def Code_chercher(color_number,attemps):

    replay = input("Veux tu jouer ? Y or N \t").upper()
    
    while replay == 'Y':
# Variables
        valid = "N"
        tries = 0
        score = 0
        misplaced = 0
        well_placed = 0
        number_of_the_parties = 0
        color_code_tries = []
       
 # Reinistialization of the score and the number of games
        reset = input("\nVoulez vous reinitialiser les satatistics ? Y or N \t").upper()
        
        if reset == "Y":
            folder_score = open(".SCORE.txt", "w")
            folder_score.write("0")
            folder_score.close
            
            folder_part = open(".Nombre parties.txt", "w")
            folder_part.write("0")
            folder_part.close
            
        folder_score = open(".SCORE.txt", "r")
        initial_score = folder_score.read()
        folder_score.close() 
        
        folder_part = open(".Nombre parties.txt", "r")
        initial_part = folder_part.read()
        folder_part.close()
        

        print("\nVotre score total est :", initial_score)
        print("Le nombre de partie est :", initial_part)
        color_code = Code_Couleur(color_number, color)
        print("\n",color_code)
        print("Les couleurs disponibles sont les suivantes :" , color )

        
# Validation of the color code chosen by the user    
        while well_placed != 4 and tries != attemps:
            
           
            while valid == "N" :
                number_of_the_parties += 1
                tries += 1
                for i in range(color_number):
# f in front of a character string allows to replace the i of the character string by its value
# upper() changes to uppercase
                    couleur = input(f"\nDonnez-moi votre {i+1}ère couleur : ").upper()
                    while couleur not in color:
                        print("Couleur inexistante. Veuillez réessayer.")
                        couleur = input(f"\nDonnez-moi votre {i+1}ère couleur : ").upper()
                    color_code_tries.append(couleur)

                print("Vous avez choisi les couleurs :", color_code_tries)
                    
                valid = input("\nValidez vous votre code_couleur? O ou N")
            
# Verification of the color code
    
            bien_places_indices = []  # To avoid counting the well-placed twice
            
# well_placed increases if the color at index i is in both lists 
            for verifcation_well_placed in range(color_number):
                if color_code[verifcation_well_placed] == color_code_tries[verifcation_well_placed]:
                    well_placed += 1
                    bien_places_indices.append(verifcation_well_placed)
                    
                    
# Stores misplaced color cues in both lists by excluding well placed color cues    
            mal_places_indices_code_couleur = [i for i in range(color_number) if i not in bien_places_indices]
            mal_places_indices_code_clrs_essaie = [i for i in range(len(color_code_tries)) if i not in bien_places_indices]
            
            
#  Check if the colors of misplaced clues are in both color code if yes then misplaced increases       
            for verifcation_misplaced in mal_places_indices_code_couleur:
                for j in mal_places_indices_code_clrs_essaie:
                    if color_code[verifcation_misplaced] in [color_code_tries[j]] :
                        misplaced += 1
                
            print("Correct : ", well_placed, "|" , "Partiel : ", misplaced, "\n")
            
            
# Score = 12-number of attempts is not very telling I think it is good to choose score = number of attempts        
            
            if well_placed == 4:
                score = tries 
# The score is saved in the hidden file 
                folder_score = open(".SCORE.txt", "w")
                folder_score.write(str(int(initial_score) + score))         
                folder_score.close()
# The number of games is saved in the hidden file            
                folder_part = open(".Nombre parties.txt", "w")
                folder_part.write(str(int(initial_part) + number_of_the_parties))         
                folder_part.close()
                print("\nVictoire !!", "Votre score est :", score)
                print("Le nombre de partie est", number_of_the_parties )
                
                
                replay = input('Rejouer ?')
                
            elif tries == attemps:
                print("Perdu, tu as eu", tries , "tentatives")
                replay = input('Rejouer ?')
                
            else :
                well_placed,misplaced = 0,0
                valid = "N"
            
    
        
        
Code_chercher(4,2)


